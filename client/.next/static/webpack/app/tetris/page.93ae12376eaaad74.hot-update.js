"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/tetris/page",{

/***/ "(app-pages-browser)/./src/app/tetris/tetris.js":
/*!**********************************!*\
  !*** ./src/app/tetris/tetris.js ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tetris: function() { return /* binding */ Tetris; }\n/* harmony export */ });\n// const tetrominoSequence = [];\n// // keep track of what is in every cell of the game using a 2d array\n// // tetris playfield is 10x20, with a few rows offscreen\n// const playfield = [];\n// // populate the empty state\n// for (let row = -2; row < 20; row++) {\n//   playfield[row] = [];\n//   for (let col = 0; col < 10; col++) {\n//     playfield[row][col] = 0;\n//   }\n// }\n// tetris.js?87f6:252 Uncaught TypeError: Cannot read properties of undefined (reading '0')\n//     at loop (webpack-internal:///(app-pages-browser)/./src/app/tetris/tetris.js:251:35)\n// color of each tetromino\nconst colors = {\n    I: \"cyan\",\n    O: \"yellow\",\n    T: \"purple\",\n    S: \"green\",\n    Z: \"red\",\n    J: \"blue\",\n    L: \"orange\"\n};\nconst initPlayField = ()=>{\n    let result = [];\n    for(let row = -2; row < 20; row++){\n        result[row] = [];\n        for(let col = 0; col < 10; col++){\n            result[row][col] = 0;\n        }\n    }\n    return result;\n};\nconst printResult = (result)=>{\n    for(let row = -2; row < 20; row++){\n        for(let col = 0; col < 10; col++){\n            console.log(result[row][col]);\n        }\n    }\n};\nconst fps = 30;\n/**\n * Class representing a Tetris game.\n * @param {function} onGameOver - The function to call when the game is over.\n * @param {function} onDrawing - The function to call when drawing the game.\n */ class Tetris {\n    RegisterKeyStroke(key) {\n        this.keyStroke = [\n            ...this.keyStroke,\n            key\n        ];\n    }\n    ExecuteKeyStroke() {\n        if (!this.keyStroke.length) return;\n        console.log(\"need to execute\", this.keyStroke);\n        const key = this.keyStroke.pop();\n    // console.log(\"execute key: \" + key);\n    }\n    startGame() {\n        this.keyStroke = [];\n        this.playfield = initPlayField();\n        this.tetromino = this.getNextTetromino();\n        this.intervalIds = [\n            setInterval(()=>this.loop(), 1000 / fps),\n            setInterval(()=>this.ExecuteKeyStroke(), 1000 / (fps * 2))\n        ];\n        return this;\n    }\n    stopGame() {\n        if (this.intervalIds[0] != -1) return -1;\n        this.intervalIds.forEach((id)=>clearInterval(id));\n    }\n    getRandomInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    generateSequence() {\n        const sequence = [\n            \"I\",\n            \"J\",\n            \"L\",\n            \"O\",\n            \"S\",\n            \"T\",\n            \"Z\"\n        ];\n        while(sequence.length){\n            const rand = this.getRandomInt(0, sequence.length - 1);\n            const name = sequence.splice(rand, 1)[0];\n            this.tetrominoSequence.push(name);\n        }\n    }\n    getNextTetromino() {\n        if (this.tetrominoSequence.length === 0) {\n            this.generateSequence();\n        }\n        const name = this.tetrominoSequence.pop();\n        const matrix = this.tetrominos[name];\n        const col = this.playfield[0].length / 2 - Math.ceil(matrix[0].length / 2);\n        const row = name === \"I\" ? -1 : -2;\n        return {\n            name: name,\n            matrix: matrix,\n            row: row,\n            col: col\n        };\n    }\n    // rotate an NxN matrix 90deg\n    // @see https://codereview.stackexchange.com/a/186834\n    rotate(matrix) {\n        const N = matrix.length - 1;\n        const result = matrix.map((row, i)=>row.map((val, j)=>matrix[N - j][i]));\n        return result;\n    }\n    // check to see if the new matrix/row/col is valid\n    isValidMove(matrix, cellRow, cellCol) {\n        for(let row = 0; row < matrix.length; row++){\n            for(let col = 0; col < matrix[row].length; col++){\n                if (matrix[row][col] && // outside the game bounds\n                (cellCol + col < 0 || cellCol + col >= this.playfield[0].length || cellRow + row >= this.playfield.length || // collides with another piece\n                this.playfield[cellRow + row][cellCol + col])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    placetetromino() {\n        for(let row = 0; row < this.tetromino.matrix.length; row++){\n            for(let col = 0; col < this.tetromino.matrix[row].length; col++){\n                if (this.tetromino.matrix[row][col]) {\n                    // game over if piece has any part offscreen\n                    if (this.tetromino.row + row < 0) {\n                        this.stopGame();\n                        return this.onGameOver();\n                    }\n                    this.playfield[this.tetromino.row + row][this.tetromino.col + col] = this.tetromino.name;\n                }\n            }\n        }\n        // check for line clears starting from the bottom and working our way up\n        for(let row = this.playfield.length - 1; row >= 0;){\n            if (this.playfield[row].every((cell)=>!!cell)) {\n                // drop every row above this one\n                for(let r = row; r >= 0; r--){\n                    for(let c = 0; c < this.playfield[r].length; c++){\n                        this.playfield[r][c] = this.playfield[r - 1][c];\n                    }\n                }\n            } else {\n                row--;\n            }\n        }\n        this.tetromino = this.getNextTetromino();\n    }\n    loop() {\n        this.onTick();\n        // context.clearRect(0, 0, canvas.width, canvas.height);\n        // draw the this.playfield\n        for(let row = 0; row < 20; row++){\n            for(let col = 0; col < 10; col++){\n                if (this.playfield[row][col]) {\n                    const name = this.playfield[row][col];\n                    //   context.fillStyle = colors[name];\n                    // drawing 1 px smaller than the grid creates a grid effect\n                    this.onDrawing({\n                        row: row + 1,\n                        col: col + 1,\n                        color: colors[name]\n                    });\n                //   drawPieceAt(row + 1, col + 1, colors[name]);\n                //   context.fillRect(col * grid, row * grid, grid - 1, grid - 1);\n                }\n            }\n        }\n        // draw the active this.tetromino\n        if (this.tetromino) {\n            // console.log(\"!draw\" + JSON.stringify(this.tetromino));\n            // this.tetromino falls every 35 frames\n            if (++this.count > 35) {\n                this.tetromino.row++;\n                this.count = 0;\n                // place piece if it runs into anything\n                if (!this.isValidMove(this.tetromino.matrix, this.tetromino.row, this.tetromino.col)) {\n                    this.tetromino.row--;\n                    this.placetetromino();\n                }\n            }\n            function isHidden(row, col) {\n                // Define the grid boundaries\n                const minRow = 0;\n                const maxRow = 19;\n                const minCol = 0;\n                const maxCol = 9;\n                // Check if the current piece's row and col are outside the boundaries\n                if (row < minRow || row > maxRow || col < minCol || col > maxCol) {\n                    return true;\n                }\n                return false;\n            }\n            function isInsideOfGameGrid(row, col) {\n                // Define the grid boundaries\n                const minRow = 0;\n                const maxRow = 19; // As the grid's height is 20\n                const minCol = 0;\n                const maxCol = 9; // As the grid's width is 10\n                // Check if the current piece's row and col are inside the boundaries\n                return row >= minRow && row <= maxRow && col >= minCol && col <= maxCol;\n            }\n            for(let row = 0; row < this.tetromino.matrix.length; row++){\n                for(let col = 0; col < this.tetromino.matrix[row].length; col++){\n                    if (this.tetromino.matrix[row][col]) {\n                        const display = isInsideOfGameGrid(this.tetromino.row + row, this.tetromino.col + col);\n                        if (!display) continue;\n                        this.onDrawing({\n                            row: this.tetromino.row + row + 1,\n                            col: this.tetromino.col + col + 1,\n                            color: colors[this.tetromino.name]\n                        });\n                    // drawPieceAt(\n                    //   this.tetromino.row + row + 1,\n                    //   this.tetromino.col + col + 1,\n                    //   colors[this.tetromino.name]\n                    // );\n                    }\n                }\n            }\n        }\n    }\n    /**\n   * Create a Tetris game.\n   * @param {function} onGameOver - The function to call when the game is over.\n   * @param {function} onDrawing - The function to call when drawing the game.\n   */ constructor(onGameOver, onDrawing, onTick){\n        this.tetrominos = {\n            I: [\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    1,\n                    1,\n                    1,\n                    1\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ]\n            ],\n            J: [\n                [\n                    1,\n                    0,\n                    0\n                ],\n                [\n                    1,\n                    1,\n                    1\n                ],\n                [\n                    0,\n                    0,\n                    0\n                ]\n            ],\n            L: [\n                [\n                    0,\n                    0,\n                    1\n                ],\n                [\n                    1,\n                    1,\n                    1\n                ],\n                [\n                    0,\n                    0,\n                    0\n                ]\n            ],\n            O: [\n                [\n                    1,\n                    1\n                ],\n                [\n                    1,\n                    1\n                ]\n            ],\n            S: [\n                [\n                    0,\n                    1,\n                    1\n                ],\n                [\n                    1,\n                    1,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0\n                ]\n            ],\n            Z: [\n                [\n                    1,\n                    1,\n                    0\n                ],\n                [\n                    0,\n                    1,\n                    1\n                ],\n                [\n                    0,\n                    0,\n                    0\n                ]\n            ],\n            T: [\n                [\n                    0,\n                    1,\n                    0\n                ],\n                [\n                    1,\n                    1,\n                    1\n                ],\n                [\n                    0,\n                    0,\n                    0\n                ]\n            ]\n        };\n        this.tetrominoSequence = [];\n        this.intervalIds = -1;\n        this.count = 0;\n        console.log(\"++++++++++ Tetris init\");\n        this.onGameOver = onGameOver;\n        this.onDrawing = onDrawing;\n        this.onTick = onTick;\n        return this;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/tetris/tetris.js\n"));

/***/ })

});